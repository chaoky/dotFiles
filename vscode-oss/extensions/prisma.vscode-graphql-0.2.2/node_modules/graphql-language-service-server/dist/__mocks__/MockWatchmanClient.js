"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 *  Copyright (c) 2019 GraphQL Contributors
 *  All rights reserved.
 *
 *  This source code is licensed under the license found in the
 *  LICENSE file in the root directory of this source tree.
 *
 *  
 */
var MockWatchmanClient =
/*#__PURE__*/
function () {
  function MockWatchmanClient() {
    _classCallCheck(this, MockWatchmanClient);
  }

  _createClass(MockWatchmanClient, [{
    key: "checkVersion",
    value: function checkVersion() {
      return Promise.resolve();
    }
  }, {
    key: "listFiles",
    value: function listFiles(entryPath) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return Promise.resolve([]);
    }
  }, {
    key: "runCommand",
    value: function runCommand() {
      return Promise.resolve();
    }
  }, {
    key: "watchProject",
    value: function watchProject(directoryPath) {
      return Promise.resolve({
        version: '',
        relative_path: '',
        watcher: '',
        watch: ''
      });
    }
  }, {
    key: "subscribe",
    value: function subscribe(entryPath, callback) {
      return Promise.resolve();
    }
  }, {
    key: "dispose",
    value: function dispose() {}
  }]);

  return MockWatchmanClient;
}();

var _default = MockWatchmanClient;
exports["default"] = _default;