"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findGraphQLTags = findGraphQLTags;

var _graphqlLanguageServiceUtils = require("graphql-language-service-utils");

var _parser = require("@babel/parser");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Attempt to be as inclusive as possible of source text.
var PARSER_OPTIONS = {
  allowImportExportEverywhere: true,
  allowReturnOutsideFunction: true,
  allowSuperOutsideMethod: true,
  sourceType: 'module',
  plugins: ['flow', 'jsx', 'doExpressions', 'objectRestSpread', ['decorators', {
    decoratorsBeforeExport: false
  }], 'classProperties', 'classPrivateProperties', 'classPrivateMethods', 'exportDefaultFrom', 'exportNamespaceFrom', 'asyncGenerators', 'functionBind', 'functionSent', 'dynamicImport', 'numericSeparator', 'optionalChaining', 'importMeta', 'bigInt', 'optionalCatchBinding', 'throwExpressions', ['pipelineOperator', {
    proposal: 'minimal'
  }], 'nullishCoalescingOperator'],
  strictMode: false
};

function findGraphQLTags(text) {
  var result = [];
  var ast = (0, _parser.parse)(text, PARSER_OPTIONS);
  var visitors = {
    CallExpression: function CallExpression(node) {
      var callee = node.callee;

      if (!(callee.type === 'Identifier' && CREATE_CONTAINER_FUNCTIONS[callee.name] || callee.kind === 'MemberExpression' && callee.object.type === 'Identifier' && callee.object.value === 'Relay' && callee.property.type === 'Identifier' && CREATE_CONTAINER_FUNCTIONS[callee.property.name])) {
        traverse(node, visitors);
        return;
      }

      var fragments = node.arguments[1];

      if (fragments.type === 'ObjectExpression') {
        fragments.properties.forEach(function (property) {
          var tagName = getGraphQLTagName(property.value.tag);
          var template = getGraphQLText(property.value.quasi);

          if (tagName) {
            var loc = property.value.loc;
            var range = new _graphqlLanguageServiceUtils.Range(new _graphqlLanguageServiceUtils.Position(loc.start.line - 1, loc.start.column), new _graphqlLanguageServiceUtils.Position(loc.end.line - 1, loc.end.column));
            result.push({
              tag: tagName,
              template: template,
              range: range
            });
          }
        });
      } else {
        var tagName = getGraphQLTagName(fragments.tag);
        var template = getGraphQLText(fragments.quasi);

        if (tagName) {
          var loc = fragments.loc;
          var range = new _graphqlLanguageServiceUtils.Range(new _graphqlLanguageServiceUtils.Position(loc.start.line - 1, loc.start.column), new _graphqlLanguageServiceUtils.Position(loc.end.line - 1, loc.end.column));
          result.push({
            tag: tagName,
            template: template,
            range: range
          });
        }
      } // Visit remaining arguments


      for (var ii = 2; ii < node.arguments.length; ii++) {
        visit(node.arguments[ii], visitors);
      }
    },
    TaggedTemplateExpression: function TaggedTemplateExpression(node) {
      var tagName = getGraphQLTagName(node.tag);

      if (tagName) {
        var loc = node.quasi.quasis[0].loc;
        var range = new _graphqlLanguageServiceUtils.Range(new _graphqlLanguageServiceUtils.Position(loc.start.line - 1, loc.start.column), new _graphqlLanguageServiceUtils.Position(loc.end.line - 1, loc.end.column));
        result.push({
          tag: tagName,
          template: node.quasi.quasis[0].value.raw,
          range: range
        });
      }
    }
  };
  visit(ast, visitors);
  return result;
}

var CREATE_CONTAINER_FUNCTIONS = {
  createFragmentContainer: true,
  createPaginationContainer: true,
  createRefetchContainer: true
};
var IDENTIFIERS = {
  graphql: true,
  gql: true
};
var IGNORED_KEYS = {
  comments: true,
  end: true,
  leadingComments: true,
  loc: true,
  name: true,
  start: true,
  trailingComments: true,
  type: true
};

function getGraphQLTagName(tag) {
  if (tag.type === 'Identifier' && IDENTIFIERS.hasOwnProperty(tag.name)) {
    return tag.name;
  } else if (tag.type === 'MemberExpression' && tag.object.type === 'Identifier' && tag.object.name === 'graphql' && tag.property.type === 'Identifier' && tag.property.name === 'experimental') {
    return 'graphql.experimental';
  }

  return null;
}

function getGraphQLText(quasi) {
  var quasis = quasi.quasis;
  return quasis[0].value.raw;
}

function visit(node, visitors) {
  var fn = visitors[node.type];

  if (fn != null) {
    fn(node);
    return;
  }

  traverse(node, visitors);
}

function traverse(node, visitors) {
  for (var key in node) {
    if (IGNORED_KEYS[key]) {
      continue;
    }

    var prop = node[key];

    if (prop && _typeof(prop) === 'object' && typeof prop.type === 'string') {
      visit(prop, visitors);
    } else if (Array.isArray(prop)) {
      prop.forEach(function (item) {
        if (item && _typeof(item) === 'object' && typeof item.type === 'string') {
          visit(item, visitors);
        }
      });
    }
  }
}