"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLWatchman = void 0;

var _fbWatchman = _interopRequireDefault(require("fb-watchman"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GraphQLWatchman =
/*#__PURE__*/
function () {
  function GraphQLWatchman() {
    _classCallCheck(this, GraphQLWatchman);

    _defineProperty(this, "_client", void 0);

    this._client = new _fbWatchman["default"].Client();
  }

  _createClass(GraphQLWatchman, [{
    key: "checkVersion",
    value: function checkVersion() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _this._client.capabilityCheck({
          optional: [],
          required: ['cmd-watch-project']
        }, function (error, response) {
          if (error) {
            reject(error);
          } else {
            // From the Watchman docs, response is something like:
            // {'version': '3.8.0', 'capabilities': {'relative_root': true}}.
            resolve();
          }
        });

        _this._client.on('error', reject);
      });
    }
  }, {
    key: "listFiles",
    value: function () {
      var _listFiles = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(entryPath) {
        var options,
            _ref,
            watch,
            relative_path,
            result,
            _args = arguments;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                _context.next = 3;
                return this.watchProject(entryPath);

              case 3:
                _ref = _context.sent;
                watch = _ref.watch;
                relative_path = _ref.relative_path;
                _context.next = 8;
                return this.runCommand('query', watch, _objectSpread({
                  expression: ['allof', ['type', 'f'], ['anyof', ['match', '*.graphql'], ['match', '*.js']], ['not', ['dirname', 'generated/relay']], ['not', ['match', '**/__flow__/**', 'wholename']], ['not', ['match', '**/__generated__/**', 'wholename']], ['not', ['match', '**/__github__/**', 'wholename']], ['not', ['match', '**/__mocks__/**', 'wholename']], ['not', ['match', '**/node_modules/**', 'wholename']], ['not', ['match', '**/__flowtests__/**', 'wholename']], ['exists']],
                  // Providing `path` will let watchman use path generator, and will perform
                  // a tree walk with respect to the relative_root and path provided.
                  // Path generator will do less work unless the root path of the repository
                  // is passed in as an entry path.
                  fields: ['name', 'size', 'mtime'],
                  relative_root: relative_path
                }, options));

              case 8:
                result = _context.sent;
                return _context.abrupt("return", result.files);

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function listFiles(_x) {
        return _listFiles.apply(this, arguments);
      }

      return listFiles;
    }()
  }, {
    key: "runCommand",
    value: function runCommand() {
      var _this2 = this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        return _this2._client.command(args, function (error, response) {
          if (error) {
            reject(error);
          }

          resolve(response);
        });
      })["catch"](function (error) {
        throw new Error(error);
      });
    }
  }, {
    key: "watchProject",
    value: function () {
      var _watchProject = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2(directoryPath) {
        var response;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return this.runCommand('watch-project', directoryPath);

              case 3:
                response = _context2.sent;
                return _context2.abrupt("return", response);

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](0);
                throw new Error(_context2.t0);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 7]]);
      }));

      function watchProject(_x2) {
        return _watchProject.apply(this, arguments);
      }

      return watchProject;
    }()
  }, {
    key: "subscribe",
    value: function () {
      var _subscribe = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3(entryPath, callback) {
        var _ref2, watch, relative_path;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.watchProject(entryPath);

              case 2:
                _ref2 = _context3.sent;
                watch = _ref2.watch;
                relative_path = _ref2.relative_path;
                _context3.next = 7;
                return this.runCommand('subscribe', watch, relative_path || watch, {
                  expression: ['allof', ['match', '*.graphql']],
                  fields: ['name', 'exists', 'size', 'mtime'],
                  relative_root: relative_path
                });

              case 7:
                this._client.on('subscription', function (result) {
                  if (result.subscription !== relative_path) {
                    return;
                  }

                  callback(result);
                });

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function subscribe(_x3, _x4) {
        return _subscribe.apply(this, arguments);
      }

      return subscribe;
    }()
  }, {
    key: "dispose",
    value: function dispose() {
      this._client.end();

      this._client = null;
    }
  }]);

  return GraphQLWatchman;
}();

exports.GraphQLWatchman = GraphQLWatchman;