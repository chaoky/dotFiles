"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _os = _interopRequireDefault(require("os"));

var _path = require("path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SEVERITY = {
  ERROR: 'ERROR',
  WARNING: 'WARNING',
  INFO: 'INFO',
  DEBUG: 'DEBUG'
};

var Logger =
/*#__PURE__*/
function () {
  function Logger() {
    _classCallCheck(this, Logger);

    _defineProperty(this, "_logFilePath", void 0);

    _defineProperty(this, "_stream", void 0);

    var dir = (0, _path.join)(_os["default"].tmpdir(), 'graphql-language-service-logs');

    try {
      if (!_fs["default"].existsSync(dir)) {
        _fs["default"].mkdirSync(dir);
      }
    } catch (_) {// intentionally no-op. Don't block the language server even if
      // the necessary setup cannot be completed for logger.
    }

    this._logFilePath = (0, _path.join)(dir, "graphql-language-service-log-".concat(_os["default"].userInfo().username, "-").concat(getDateString(), ".log"));
    this._stream = null;
  }

  _createClass(Logger, [{
    key: "error",
    value: function error(message) {
      this._log(message, 'ERROR');
    }
  }, {
    key: "warn",
    value: function warn(message) {
      this._log(message, 'WARNING');
    }
  }, {
    key: "info",
    value: function info(message) {
      this._log(message, 'INFO');
    }
  }, {
    key: "log",
    value: function log(message) {
      this._log(message, 'DEBUG');
    }
  }, {
    key: "_log",
    value: function _log(message) {
      var severityKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DEBUG';
      var timestamp = new Date().toLocaleString(undefined);
      var severity = SEVERITY[severityKey];
      var pid = process.pid;
      var logMessage = "".concat(timestamp, " [").concat(severity, "] (pid: ").concat(pid, ") graphql-language-service-usage-logs: ").concat(message, "\n\n"); // write to the file in tmpdir

      _fs["default"].appendFile(this._logFilePath, logMessage, function (error) {});
    }
  }]);

  return Logger;
}(); // function getUnixTime() {
//   return new Date().getTime() / 1000;
// }


exports.Logger = Logger;

function getDateString() {
  var date = new Date();
  return "".concat(date.getFullYear(), "-").concat(date.getMonth() + 1, "-").concat(date.getDate());
}